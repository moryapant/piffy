name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install PHP dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction

    - name: Install Node dependencies
      run: npm ci

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate app key
      run: php artisan key:generate

    - name: Configure database
      run: |
        php artisan config:clear
        php artisan config:cache

    - name: Run migrations
      run: php artisan migrate --force
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: root

    - name: Build assets
      run: npm run build

    - name: Run tests
      run: php artisan test
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: root

    - name: Run Pint
      run: vendor/bin/pint --dirty

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install PHP dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction

    - name: Install Node dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Create deployment archive
      run: |
        tar -czf deploy.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=tests \
          --exclude=.env \
          --exclude=.env.example \
          --exclude=storage/logs \
          --exclude=.github \
          .

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Navigate to deployment directory
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Create backup
          if [ -d "current" ]; then
            cp -r current backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Create new deployment directory
          mkdir -p releases/$(date +%Y%m%d-%H%M%S)
          cd releases/$(date +%Y%m%d-%H%M%S)
          
          # Download and extract deployment archive
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3.raw" \
               -L "${{ github.api_url }}/repos/${{ github.repository }}/tarball/${{ github.sha }}" \
               -o deploy.tar.gz
          
          tar -xzf deploy.tar.gz --strip-components=1
          rm deploy.tar.gz
          
          # Set up environment
          cp ${{ secrets.DEPLOY_PATH }}/.env .env
          
          # Set permissions
          chmod -R 755 storage bootstrap/cache
          chown -R www-data:www-data storage bootstrap/cache
          
          # Install dependencies and optimize
          /usr/local/bin/composer install --no-dev --optimize-autoloader --no-interaction
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan event:cache
          
          # Run migrations
          php artisan migrate --force
          
          # Update symlink
          cd ${{ secrets.DEPLOY_PATH }}
          ln -nfs releases/$(date +%Y%m%d-%H%M%S) current
          
          # Restart services
          sudo systemctl reload php8.2-fpm
          sudo systemctl reload nginx
          
          # Clean up old releases (keep last 5)
          cd releases && ls -t | tail -n +6 | xargs -r rm -rf

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd ${{ secrets.DEPLOY_PATH }}/current
          php artisan --version
          curl -f ${{ secrets.APP_URL }}/health || exit 1